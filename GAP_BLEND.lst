.cpu 6502
                                           ;  DoubleGap by Christopher Cantrell 2006
                                           ;  ccantrell@knology.net
                                           
                                           ;  TO DO
                                           ;  - Expert switches are backwards
                                           ;  - Debounce switches
                                           
                                           ;  build-command java Blend gap.asm g2.asm
                                           ;  build-command tasm -b -65 g2.asm g2.bin
                                           
                                           ;  This file uses the "BLEND" program for assembly pre-processing
                                           ;  processor 6502
                                           
; On the web: [http://www.alienbill.com/2600/101/docs/stella.html Stella Programmer's Guide]

; The address decoding for the 2600 is very simple. The TIA is accessed
; if A12 is 0 and A7 is 0. The TIA is selected if (address&1080 == 0000).
;
; The TIA chip uses the 6 lower address lines A0-A5. The reads seem to 
; ignore A4 and A5.
;
; The addresses have different read/write definitions and many of them
; are strobes that are triggered by writing any value.
;
; Note that the 6502 has an 8-bit stack pointer. The CPU automatically sets the upper
; byte of the address to 01. The RIOT chip RAM ghosts from 00xx to 01xx putting the stack
; in RAM.

; TIA

; Reads
.CXM0P    = 0x0000 ; Collisions M0/P1
.CXM1P    = 0x0001 ; Collisions M1/P0
.CXP0FB   = 0x0002 ; Collisions M0/PF
.CXP1FB   = 0x0003 ; Collisions P1/PF
.CXM0FB   = 0x0004 ; Collisions M0/PF
.CXM1FB   = 0x0005 ; Collisions M1/PF
.CXBLPF   = 0x0006 ; Collisions BL/PF
.CXPPMM   = 0x0007 ; Collisions P0/P1
.INPT0    = 0x0008 ; Paddle input 0
.INPT1    = 0x0009 ; Paddle input 1
.INPT2    = 0x000A ; Paddle input 2
.INPT3    = 0x000B ; Paddle input 3
.INPT4    = 0x000C ; Latched inputs (joystick buttons)
.INPT5    = 0x000D ; Latched inputs (joystick buttons)

; Writes
.VSYNC    = 0x0000 ; D1=1 starts the vertical sync 
.VBLANK   = 0x0001 ; D1=1 starts the vertical blank (D6 and D7 config INPT0-5) 
.WSYNC    = 0x0002 ; Halts processor until leading edge of horizontal blank 
.RSYNC    = 0x0003 ; Resets sync counter (used in chip testing) 
.NUSIZ0   = 0x0004 ; Number and size of player/missile P0 
.NUSIZ1   = 0x0005 ; Number and size of player/missile P0 
.COLUP0   = 0x0006 ; Color-luminance of player 0 
.COLUP1   = 0x0007 ; Color-luminance of player 1 
.COLUPF   = 0x0008 ; Color-luminance of play filed 
.COLUBK   = 0x0009 ; Color-luminance of background 
.CTRLPF   = 0x000A ; Control playfield, priorities, and ball size 
.REFP0    = 0x000B ; D3=1 reflects player 0 
.PEFP1    = 0x000C ; D3=1 reflects player 1 
.PF0      = 0x000D ; Playfield 0 bits (upper 4 bits) 
.PF1      = 0x000E ; Playfield 1 bits 
.PF2      = 0x000F ; Playfield 2 bits 
.RESP0    = 0x0010 ; Set horizontal position of player 0 
.RESP1    = 0x0011 ; Set horizontal position of player 1 
.RESM0    = 0x0012 ; Set horizontal position of missile 0 
.RESM1    = 0x0013 ; Set horizontal position of missile 1 
.RESBL    = 0x0014 ; Set horizontal position of ball 
.AUDC0    = 0x0015 ; Noise, tone, division control channel 0 
.AUDC1    = 0x0016 ; Noise, tone, division control channel 1 
.AUDF0    = 0x0017 ; Frequency divider channel 0 
.AUDF1    = 0x0018 ; Frequency divider channel 1 
.AUDV0    = 0x0019 ; Volume channel 0 
.AUDV1    = 0x001A ; Volume channel 1 
.GRP0     = 0x001B ; Player 0 graphics 
.GRP1     = 0x001C ; Player 1 graphics 
.ENAM0    = 0x001D ; D1=1 to enable missile 0 
.ENAM1    = 0x001E ; D1=1 to enable missile 1 
.ENABL    = 0x001F ; D1=1 to enable ball 
.HMP0     = 0x0020 ; Horizontal motion offset for player 0 
.HMP1     = 0x0021 ; Horizontal motion offset for player 1 
.HMM0     = 0x0022 ; Horizontal motion offset for missile 0 
.HMM1     = 0x0023 ; Horizontal motion offset for missile 1 
.HMBL     = 0x0024 ; Horizontal motion offset for ball 
.VDELP0   = 0x0025 ; D0=1 to delay player 0 one vertical line 
.VDELP1   = 0x0026 ; D0=1 to delay player 1 one vertical line 
.VDELBL   = 0x0027 ; D0=1 to delay ball one vertical line 
.RESMP0   = 0x0028 ; D1=1 to reset missile 0 to player 0 
.RESMP1   = 0x0029 ; D1=1 to reset missile 1 to player 1 
.HMOVE    = 0x002A ;  Executes horizontal motions 
.HMCLR    = 0x002B ; Clears all horizonal motion registers 
.CXCLR    = 0x002C ; Clears all collision registers 

; PIA

; The PIA (R.I.O.T.) is accessed if A12 is 0 and A7 is 1. If A9 is 0 then the 128 bytes 
; of RAM are selected. If A9 is 1 then the PIA timer registers are selected.
;
; The TIA REGS are selected if (address&1280 == 0280).
;
; The TIA RAM is selected if (address&1280 == 0080).
;
; The PIA chip uses the lower 7 address lines A0-A6. Thus the 007F mask below.

.SWCHA    = 0x0280 ; Port A Hand controllers 
.SWACNT   = 0x0281 ; Port A DDR 

.SWCHB    = 0x0282 ; Port B Console switches 
; D7 : P1 difficulty (0=amateur, 1=pro)
; D6 : P0 difficulty (0=amateur, 1=pro)
; D5 : not used
; D4 : not used
; D3 : color or B/W (0=B/W, 1=color)
; D2 : not used
; D1 : game select (0=pressed)
; D0 : game reset (0=pressed)

.SWBCNT   = 0x0283 ; Port B DDR 
.INTIM    = 0x0284 ; Timer output (read only) 
.TIM1T    = 0x0294 ; Set 1 clock interval (write only) 
.TIM8T    = 0x0295 ; Set 8 clock interval (write only) 
.TIM64T   = 0x0296 ; Set 64 clock interval (write only) 
.TIM1024T = 0x0297 ; Set 1024 clock interval (write only) 
                                           
                                           ;  The EditorTab comments are read by the SNAP editor, which makes 
                                           ;  assembly editing a ... SNAP!
                                           
                                           ;
                                           
                                           ;  RAM usage
                                           
.TMP0             =     128
.TMP1             =     129
.TMP2             =     130
.PLAYR0Y          =     131
.PLAYR1Y          =     132
.MUS_TMP0         =     133
.MUS_TMP1         =     134
.SCANCNT          =     135
.MODE             =     136
.WALL_INC         =     137
.WALLCNT          =     138
.WALLDELY         =     139
.WALLDELYR        =     140
.ENTROPYA         =     141
.ENTROPYB         =     142
.ENTROPYC         =     143
.DEBOUNCE         =     144
.WALLDRELA        =     145
.WALLDRELB        =     146
.WALLDRELC        =     147
.WALLSTART        =     148
.WALLHEI          =     149
.GAPBITS          =     150
.SCORE_PF1        =     151
.SCORE_PF2        =     157
.MUSADEL          =     163
.MUSAIND          =     164
.MUSAVOL          =     165
.MUSBDEL          =     166
.MUSBIND          =     167
.MUSBVOL          =     168
                                           
                                           ;  Remember, stack builds down from $FF ... leave some space
                                           
                                           ;  80 - A8 ... that's 41 bytes of RAM used
                                           
                                           ; </EditorTab>
                                           
F000:
                                           
                                           ; <EditorTab name="main">
                                           
main:                                      ;  --SubroutineContextBegins--
F000: 78                        SEI                       ; OLine=66  Turn off interrupts
F001: D8                        CLD                       ; OLine=67  Clear the "decimal" flag
F002: A2 FF                     LDX      #255             
F004: 9A                        TXS                       ; OLine=69  ... to the end of RAM
F005: 20 0B F1                  JSR      INIT             ; OLine=70  Initialize game environment
F008: 20 EA F1                  JSR      INIT_SELMODE     ; OLine=71  Start out in SELECT-MODE
F00B: 20 0F F0                  JSR      VIDEO_KERNEL     ; OLine=72  There should be no return from the KERNEL
F00E: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ; </EditorTab>
                                           
                                           ; <EditorTab name="kernel">
                                           
VIDEO_KERNEL:                              ;  --SubroutineContextBegins--
                                           ;   (start here at the END of every frame)
                                           
FLOW_A_1_OUTPUT_BEGIN:                           
                                           
F00F: A9 02                     LDA      #2               ; OLine=84  D1 bit ON
F011: 85 02                     STA      WSYNC            ; OLine=85  Wait for the end of the current line
F013: 85 01                     STA      VBLANK           ; OLine=86  Turn the electron beam off
F015: 85 02                     STA      WSYNC            ; OLine=87  Wait for all ...
F017: 85 02                     STA      WSYNC            ; OLine=88  ... the electrons ...
F019: 85 02                     STA      WSYNC            ; OLine=89  ... to drain out.
F01B: 85 00                     STA      VSYNC            ; OLine=90  Trigger the vertical sync signal
F01D: 85 02                     STA      WSYNC            ; OLine=91  Hold the vsync signal for ...
F01F: 85 02                     STA      WSYNC            ; OLine=92  ... three ...
F021: 85 02                     STA      WSYNC            ; OLine=93  ... scanlines
F023: 85 2A                     STA      HMOVE            ; OLine=94  Tell hardware to move all game objects
F025: A9 00                     LDA      #0               ; OLine=95  D1 bit OFF
F027: 85 00                     STA      VSYNC            ; OLine=96  Release the vertical sync signal
F029: A9 2B                     LDA      #43              ; OLine=97  Set timer to 43*64 = 2752 machine ...
F02B: 8D 96 02                  STA      TIM64T           ; OLine=98  ... cycles 2752/(228/3) = 36 scanlines
                                           
                                           ;  ***** LENGTHY GAME LOGIC PROCESSING BEGINS HERE *****
                                           
                                           ;  Do one of 3 routines while the beam travels back to the top
                                           ;  0 = Game Over processing
                                           ;  1 = Playing-Game processing
                                           ;  2 = Selecting-Game processing
                                           
F02E: E6 8D                     INC      ENTROPYA         ; OLine=107  Counting video frames as part of the random number
F030: A5 88                     LDA      MODE             ; OLine=108  What are we doing between frames?
                                           
F032: C9 00                     CMP      #0               
F034: F0 10                     BEQ      FLOW_A_2_OUTPUT_TRUE 
F036: C9 01                     CMP      #1               
F038: F0 06                     BEQ      FLOW_A_3_OUTPUT_TRUE 
F03A: 20 F9 F1                  JSR      SELMODE          ; OLine=115  Selecting game processing
F03D: 4C 49 F0                  JMP      FLOW_A_2_OUTPUT_END 
FLOW_A_3_OUTPUT_TRUE:                           
F040: 20 68 F1                  JSR      PLAYMODE         ; OLine=113  Playing-game processing
F043: 4C 49 F0                  JMP      FLOW_A_2_OUTPUT_END 
FLOW_A_2_OUTPUT_TRUE:                           
F046: 20 50 F2                  JSR      GOMODE           ; OLine=111  Game-over processing
FLOW_A_2_OUTPUT_END:                           
                                           
                                           ;  ***** LENGTHY GAME LOGIC PROCESSING ENDS HERE *****
                                           
F049: AD 84 02                  LDA      INTIM            ; OLine=121  Wait for the visible area of the screen
F04C: C9 00                     CMP      #0               
F04E: D0 F9                     BNE      FLOW_A_2_OUTPUT_END 
                                           
F050: 85 02                     STA      WSYNC            ; OLine=124  37th scanline
F052: A9 00                     LDA      #0               ; OLine=125  Turn the ...
F054: 85 01                     STA      VBLANK           ; OLine=126  ... electron beam back on
                                           
F056: A9 00                     LDA      #0               ; OLine=128  Zero out ...
F058: 85 87                     STA      SCANCNT          ; OLine=129  ... scanline count ...
F05A: 85 80                     STA      TMP0             ; OLine=130  ... and all ...
F05C: 85 81                     STA      TMP1             ; OLine=131  ... returns ...
F05E: 85 82                     STA      TMP2             ; OLine=132  ... expected ...
F060: AA                        TAX                       ; OLine=133  ... to come from ...
F061: A8                        TAY                       ; OLine=134  ... BUILDROW
                                           
F062: 85 2C                     STA      CXCLR            ; OLine=136  Clear collision detection
                                           
                                           ;  BEGIN VISIBLE PART OF FRAME
                                           
FLOW_A_5_OUTPUT_BEGIN:                           
                                           
F064: A5 80                     LDA      TMP0             ; OLine=142  Get A ready (PF0 value)
F066: 85 02                     STA      WSYNC            ; OLine=143  Wait for very start of row
F068: 86 1B                     STX      GRP0             ; OLine=144  Player 0 -- in X
F06A: 84 1C                     STY      GRP1             ; OLine=145  Player 1 -- in Y
F06C: 85 0D                     STA      PF0              ; OLine=146  PF0      -- in TMP0 (already in A)
F06E: A5 81                     LDA      TMP1             ; OLine=147  PF1      -- in TMP1
F070: 85 0E                     STA      PF1              ; OLine=148  ...
F072: A5 82                     LDA      TMP2             ; OLine=149  PP2      -- in TMP2
F074: 85 0F                     STA      PF2              ; OLine=150  ...
                                           
F076: 20 94 F0                  JSR      BUILDROW         ; OLine=152  This MUST take through to the next line
                                           
F079: E6 87                     INC      SCANCNT          ; OLine=154  Next scan line
F07B: A5 87                     LDA      SCANCNT          ; OLine=155  Do 109*2 = 218 lines
                                           
F07D: C9 6D                     CMP      #109             
F07F: D0 E3                     BNE      FLOW_A_5_OUTPUT_BEGIN 
                                           
                                           ;  END VISIBLE PART OF FRAME
                                           
F081: A9 00                     LDA      #0               ; OLine=161  Turning off visuals
F083: 85 02                     STA      WSYNC            ; OLine=162  Next scanline
F085: 85 0D                     STA      PF0              ; OLine=163  Play field 0 off
F087: 85 1B                     STA      GRP0             ; OLine=164  Player 0 off
F089: 85 1C                     STA      GRP1             ; OLine=165  Player 1 off
F08B: 85 0E                     STA      PF1              ; OLine=166  Play field 1 off
F08D: 85 0F                     STA      PF2              ; OLine=167  Play field 2 off
F08F: 85 02                     STA      WSYNC            ; OLine=168  Next scanline
                                           
F091: 4C 0F F0                  JMP      FLOW_A_1_OUTPUT_BEGIN 
                                           
                                           
                                           ;  ======================================
                                           
BUILDROW:                                  ;  --SubroutineContextBegins--
                                           
F094: A5 87                     LDA      SCANCNT          ; OLine=178  Current scanline
                                           
F096: C9 06                     CMP      #6               
F098: 90 40                     BCC      FLOW_A_6_OUTPUT_TRUE 
                                           
F09A: 29 07                     AND      #7               ; OLine=225  Lower 3 bits as an index again
F09C: A8                        TAY                       ; OLine=226  Using Y to lookup graphics
F09D: B9 5A F5                  LDA      GR_PLAYER,Y      ; OLine=227  Get the graphics (if enabled on this row)
F0A0: AA                        TAX                       ; OLine=228  Hold it (for return as player 0)
F0A1: A8                        TAY                       ; OLine=229  Hold it (for return as player 1)
F0A2: A5 87                     LDA      SCANCNT          ; OLine=230  Scanline count again
F0A4: 4A                        LSR      A                ; OLine=231  This time ...
F0A5: 4A                        LSR      A                ; OLine=232  ... we divide ...
F0A6: 4A                        LSR      A                ; OLine=233  ... by eight (8 rows in picture)
                                           
F0A7: C5 83                     CMP      PLAYR0Y          
F0A9: F0 02                     BEQ      FLOW_A_7_OUTPUT_FALSE 
F0AB: A2 00                     LDX      #0               ; OLine=236  Not time for Player 0 ... no graphics
FLOW_A_7_OUTPUT_FALSE:                           
                                           
F0AD: C5 84                     CMP      PLAYR1Y          
F0AF: F0 02                     BEQ      FLOW_A_8_OUTPUT_FALSE 
F0B1: A0 00                     LDY      #0               ; OLine=240  Not time for Player 0 ... no graphics
FLOW_A_8_OUTPUT_FALSE:                           
                                           
F0B3: A5 94                     LDA      WALLSTART        ; OLine=243  Calculate ...
F0B5: 18                        CLC                       ; OLine=244  ... the bottom of ...  
F0B6: 65 95                     ADC      WALLHEI          
F0B8: 85 80                     STA      TMP0             ; OLine=245  ... the wall
                                           
F0BA: A5 87                     LDA      SCANCNT          ; OLine=247  Scanline count
                                           
F0BC: C5 94                     CMP      WALLSTART        
F0BE: 90 11                     BCC      FLOW_A_9_OUTPUT_FALSE 
F0C0: C5 80                     CMP      TMP0             
F0C2: B0 0D                     BCS      FLOW_A_9_OUTPUT_FALSE 
                                           ;  The wall is on this row
F0C4: A5 91                     LDA      WALLDRELA        ; OLine=251  Draw wall ...
F0C6: 85 80                     STA      TMP0             ; OLine=252  ... by transfering ...
F0C8: A5 92                     LDA      WALLDRELB        ; OLine=253  ... playfield ...
F0CA: 85 81                     STA      TMP1             ; OLine=254  ... patterns ...
F0CC: A5 93                     LDA      WALLDRELC        ; OLine=255  ... to ...
F0CE: 85 82                     STA      TMP2             ; OLine=256  ... return area
F0D0: 60                        RTS                       
FLOW_A_9_OUTPUT_FALSE:                           
                                           ;  The wall is NOT on this row
F0D1: A9 00                     LDA      #0               ; OLine=259  No walls on this row
F0D3: 85 80                     STA      TMP0             ; OLine=260  ... clear ...
F0D5: 85 81                     STA      TMP1             ; OLine=261  ... out ...
F0D7: 85 82                     STA      TMP2             ; OLine=262  ... the playfield
                                           
F0D9: 60                        RTS                       
FLOW_A_6_OUTPUT_TRUE:                           
                                           
F0DA: 29 07                     AND      #7               ; OLine=182  Only need the lower 3 bits
F0DC: A8                        TAY                       ; OLine=183  Soon to be an index into a list
                                           
                                           ;  At this point, the beam is past the loading of the
                                           ;  playfield for the left half. We want to make sure
                                           ;  that the right half of the playfield is off, so do that
                                           ;  now.
                                           
F0DD: A2 00                     LDX      #0               ; OLine=190  Blank bit pattern
F0DF: 86 80                     STX      TMP0             ; OLine=191  This will always be blank
F0E1: 86 0E                     STX      PF1              ; OLine=192  Turn off playfield ...
F0E3: 86 0F                     STX      PF2              ; OLine=193  ... for right half of the screen
                                           
F0E5: AA                        TAX                       ; OLine=195  Another index
F0E6: B9 97 00                  LDA      SCORE_PF1,Y      ; OLine=196  Lookup the PF1 graphics for this row
F0E9: 85 81                     STA      TMP1             ; OLine=197  Return it to the caller
F0EB: A8                        TAY                       ; OLine=198  We'll need this value again in a second
F0EC: B5 9D                     LDA      SCORE_PF2,X      ; OLine=199  Lookup the PF2 graphics for this row
F0EE: 85 82                     STA      TMP2             ; OLine=200  Return it to the caller
                                           
F0F0: 85 02                     STA      WSYNC            ; OLine=202  Now on the next row
                                           
F0F2: 84 0E                     STY      PF1              ; OLine=204  Repeat the left-side playfield ...
F0F4: 85 0F                     STA      PF2              ; OLine=205  ... onto the new row
                                           
F0F6: B5 9D                     LDA      SCORE_PF2,X      ; OLine=207  Kill some time waiting for the ...
F0F8: B5 9D                     LDA      SCORE_PF2,X      ; OLine=208  ... beam to pass the left half ...
F0FA: B5 9D                     LDA      SCORE_PF2,X      ; OLine=209  ... of the playfield again
F0FC: B5 9D                     LDA      SCORE_PF2,X      ; OLine=210  
F0FE: B5 9D                     LDA      SCORE_PF2,X      ; OLine=211  
F100: B5 9D                     LDA      SCORE_PF2,X      ; OLine=212  
                                           
F102: A2 00                     LDX      #0               ; OLine=214  Return 0 (off) for player 0 ...
F104: A0 00                     LDY      #0               ; OLine=215  ... and player 1
                                           
                                           ;  The beam is past the left half of the field again.
                                           ;  Turn off the playfield.
                                           
F106: 86 0E                     STX      PF1              ; OLine=220  0 to PF1 ...
F108: 86 0F                     STX      PF2              ; OLine=221  ... and PF2
                                           
                                           
F10A: 60                        RTS                       ;  --SubroutineContextEnds--
                                           ; </EditorTab>
                                           
                                           ;  ============= END OF VIDEO KERNEL ===================
                                           
                                           
                                           ;  ======================================
                                           ; <EditorTab name="init">
INIT:                                      ;  --SubroutineContextBegins--
                                           
                                           ;  This function is called ONCE at power-up/reset to initialize various
                                           ;  hardware and temporaries.
                                           
F10B: A9 40                     LDA      #64              
F10D: 85 08                     STA      COLUPF           ; OLine=281  ... redish
F10F: A9 7E                     LDA      #126             
F111: 85 06                     STA      COLUP0           ; OLine=283  ... white
F113: A9 00                     LDA      #0               ; OLine=284  Player 1 ...
F115: 85 07                     STA      COLUP1           ; OLine=285  ... black
                                           
F117: A9 05                     LDA      #5               ; OLine=287  Right half of playfield is reflection of left ...
F119: 85 0A                     STA      CTRLPF           ; OLine=288  ... and playfield is on top of players
                                           
F11B: A2 04                     LDX      #4               ; OLine=290  Player 0 position count
F11D: A0 03                     LDY      #3               ; OLine=291  Player 1 position count
F11F: 85 02                     STA      WSYNC            ; OLine=292  Get a fresh scanline
                                           
FLOW_A_10_OUTPUT_BEGIN:                           
F121: CA                        DEX                       ; OLine=295  Kill time while the beam moves 
F122: E0 00                     CPX      #0               
F124: D0 FB                     BNE      FLOW_A_10_OUTPUT_BEGIN 
F126: 85 10                     STA      RESP0            ; OLine=297  Mark player 0's X position
                                           
FLOW_A_11_OUTPUT_BEGIN:                           
F128: 88                        DEY                       ; OLine=300  Kill more time
F129: C0 00                     CPY      #0               
F12B: D0 FB                     BNE      FLOW_A_11_OUTPUT_BEGIN 
F12D: 85 11                     STA      RESP1            ; OLine=302  Mark player 1's X position
                                           
F12F: 20 2D F3                  JSR      EXPERTISE        ; OLine=304  Initialize the players' Y positions base on expert-settings
                                           
F132: A9 0A                     LDA      #10              ; OLine=306  Wall is ...
F134: 85 95                     STA      WALLHEI          ; OLine=307  ... 10 double-scanlines high
                                           
F136: A9 00                     LDA      #0               ; OLine=309  Set score to ...
F138: 85 8A                     STA      WALLCNT          ; OLine=310  ... 0
F13A: 20 AD F2                  JSR      MAKE_SCORE       ; OLine=311  Blank the score digits
F13D: A9 00                     LDA      #0               ; OLine=312  Blank bits ...
F13F: 85 A2                     STA      SCORE_PF2+5      ; OLine=313  ... on the end of each ...
F141: 85 9C                     STA      SCORE_PF1+5      ; OLine=314  ... digit pattern
                                           
F143: 20 58 F3                  JSR      ADJUST_DIF       ; OLine=316  Initialize the wall parameters
F146: 20 7F F2                  JSR      NEW_GAPS         ; OLine=317  Build the wall's initial gap
                                           
F149: A9 70                     LDA      #112             ; OLine=319  Set wall position off bottom ...
F14B: 85 94                     STA      WALLSTART        ; OLine=320  ... to force a restart on first move
                                           
F14D: A9 00                     LDA      #0               ; OLine=322  Zero out ...
F14F: 85 20                     STA      HMP0             ; OLine=323  ... player 0 motion ...
F151: 85 21                     STA      HMP1             ; OLine=324  ... and player 1 motion
                                           
F153: 60                        RTS                       ;  --SubroutineContextEnds--
                                           ; </EditorTab>
                                           
                                           ;  ===================================
                                           ; <EditorTab name="play-mode">
INIT_PLAYMODE:                             ;  --SubroutineContextBegins--
                                           
                                           ;  This function initializes the game play mode
                                           
F154: A9 C0                     LDA      #192             
F156: 85 09                     STA      COLUBK           ; OLine=336  ... greenish
F158: A9 01                     LDA      #1               ; OLine=337  Game mode is ...
F15A: 85 88                     STA      MODE             ; OLine=338  ... SELECT
F15C: A9 FF                     LDA      #255             ; OLine=339  Restart wall score to ...
F15E: 85 8A                     STA      WALLCNT          ; OLine=340  ... 0 on first move
F160: A9 70                     LDA      #112             ; OLine=341  Force wall to start ...
F162: 85 94                     STA      WALLSTART        ; OLine=342  ... over on first move
F164: 20 AB F3                  JSR      INIT_MUSIC       ; OLine=343  Initialize the music
F167: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
PLAYMODE:                                  ;  --SubroutineContextBegins--
                                           
                                           ;  This function is called once per frame to process the main game play.
                                           
                                           
F168: 20 96 F3                  JSR      SEL_RESET_CHK    ; OLine=352  Check to see if Reset/Select has changed
                                           
F16B: C9 00                     CMP      #0               
F16D: F0 06                     BEQ      FLOW_A_12_OUTPUT_FALSE 
F16F: 86 90                     STX      DEBOUNCE         ; OLine=355  Restore the old value ...
F171: 20 EA F1                  JSR      INIT_SELMODE     ; OLine=356  ... and let select-mode process the toggle
F174: 60                        RTS                       ; OLine=357
FLOW_A_12_OUTPUT_FALSE:                           
                                           
F175: 20 C8 F3                  JSR      PROCESS_MUSIC    ; OLine=360  Process any playing music
F178: 20 5B F2                  JSR      MOVE_WALLS       ; OLine=361  Move the walls
                                           
F17B: C9 01                     CMP      #1               
F17D: D0 0D                     BNE      FLOW_A_13_OUTPUT_FALSE 
F17F: E6 8A                     INC      WALLCNT          ; OLine=364  Bump the score
F181: 20 58 F3                  JSR      ADJUST_DIF       ; OLine=365  Change the wall parameters based on score
F184: A5 8A                     LDA      WALLCNT          ; OLine=366  Change the ...
F186: 20 AD F2                  JSR      MAKE_SCORE       ; OLine=367  ... score pattern
F189: 20 7F F2                  JSR      NEW_GAPS         ; OLine=368  Calculate the new gap position
FLOW_A_13_OUTPUT_FALSE:                           
                                           
F18C: A5 02                     LDA      CXP0FB           ; OLine=371  Player 0 collision with playfield
F18E: 85 80                     STA      TMP0             ; OLine=372  Hold it
F190: A5 03                     LDA      CXP1FB           ; OLine=373  Player 1 collision with playfield
F192: 05 80                     ORA      TMP0             ; OLine=374  Did either ...
F194: 29 80                     AND      #128             
                                           
F196: C9 00                     CMP      #0               
F198: F0 04                     BEQ      FLOW_A_14_OUTPUT_FALSE 
F19A: 20 24 F2                  JSR      INIT_GOMODE      ; OLine=378  Go to Game-Over mode
F19D: 60                        RTS                       ; OLine=379
FLOW_A_14_OUTPUT_FALSE:                           
                                           
F19E: AD 80 02                  LDA      SWCHA            ; OLine=382  Joystick
F1A1: 65 8E                     ADC      ENTROPYB         ; OLine=383  Add to ...  
F1A3: 85 8E                     STA      ENTROPYB         ; OLine=384  ... entropy
                                           
F1A5: AD 80 02                  LDA      SWCHA            ; OLine=386  Joystick
F1A8: 29 80                     AND      #128             
F1AA: C9 00                     CMP      #0               
F1AC: F0 15                     BEQ      FLOW_A_15_OUTPUT_TRUE 
F1AE: AD 80 02                  LDA      SWCHA            ; OLine=391  Joystick
F1B1: 29 40                     AND      #64              
F1B3: C9 00                     CMP      #0               
F1B5: F0 05                     BEQ      FLOW_A_16_OUTPUT_TRUE 
F1B7: A9 00                     LDA      #0               ; OLine=397  Not moving value
F1B9: 4C C5 F1                  JMP      FLOW_A_15_OUTPUT_END 
FLOW_A_16_OUTPUT_TRUE:                           
F1BC: E6 8F                     INC      ENTROPYC         ; OLine=394  Yes ... increase entropy
F1BE: A9 10                     LDA      #16              
F1C0: 4C C5 F1                  JMP      FLOW_A_15_OUTPUT_END 
FLOW_A_15_OUTPUT_TRUE:                           
F1C3: A9 F0                     LDA      #240             
FLOW_A_15_OUTPUT_END:                           
F1C5: 85 20                     STA      HMP0             ; OLine=400  New movement value P0
                                           
F1C7: AD 80 02                  LDA      SWCHA            ; OLine=402  Joystick
F1CA: 29 08                     AND      #8               
F1CC: C9 00                     CMP      #0               
F1CE: F0 15                     BEQ      FLOW_A_17_OUTPUT_TRUE 
F1D0: AD 80 02                  LDA      SWCHA            ; OLine=407  Joystick
F1D3: 29 04                     AND      #4               
F1D5: C9 00                     CMP      #0               
F1D7: F0 07                     BEQ      FLOW_A_18_OUTPUT_TRUE 
F1D9: E6 8F                     INC      ENTROPYC         ; OLine=412  Increase entropy
F1DB: A9 00                     LDA      #0               ; OLine=413  Not moving value
F1DD: 4C E7 F1                  JMP      FLOW_A_17_OUTPUT_END 
FLOW_A_18_OUTPUT_TRUE:                           
F1E0: A9 10                     LDA      #16              
F1E2: 4C E7 F1                  JMP      FLOW_A_17_OUTPUT_END 
FLOW_A_17_OUTPUT_TRUE:                           
F1E5: A9 F0                     LDA      #240             
FLOW_A_17_OUTPUT_END:                           
F1E7: 85 21                     STA      HMP1             ; OLine=416  New movement value P1
                                           
F1E9: 60                        RTS                       ;  --SubroutineContextEnds--
                                           ; </EditorTab>
                                           
                                           ;  ===================================
                                           ; <EditorTab name="select-mode">
INIT_SELMODE:                              ;  --SubroutineContextBegins--
                                           
                                           ;  This function initializes the games SELECT-MODE
                                           ;           
F1EA: A9 00                     LDA      #0               ; OLine=427  Turn off ...
F1EC: 85 19                     STA      AUDV0            ; OLine=428  ... all ...
F1EE: 85 1A                     STA      AUDV1            ; OLine=429  ... sound
F1F0: A9 C8                     LDA      #200             
F1F2: 85 09                     STA      COLUBK           ; OLine=431  ... greenish bright
F1F4: A9 02                     LDA      #2               ; OLine=432  Now in ...
F1F6: 85 88                     STA      MODE             ; OLine=433  SELECT game mode
F1F8: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
SELMODE:                                   ;  --SubroutineContextBegins--
                                           
                                           ;  This function is called once per frame to process the SELECT-MODE.
                                           ;  The wall moves here, but doesn't change or collide with players.
                                           ;  This function selects between 1 and 2 player game.
                                           
F1F9: 20 5B F2                  JSR      MOVE_WALLS       ; OLine=443  Move the walls
F1FC: 20 96 F3                  JSR      SEL_RESET_CHK    ; OLine=444  Check the reset/select switches
                                           
F1FF: C9 01                     CMP      #1               
F201: F0 1A                     BEQ      FLOW_A_19_OUTPUT_TRUE 
F203: C9 03                     CMP      #3               
F205: F0 16                     BEQ      FLOW_A_19_OUTPUT_TRUE 
F207: C9 02                     CMP      #2               
F209: D0 15                     BNE      FLOW_A_19_OUTPUT_END 
F20B: A5 84                     LDA      PLAYR1Y          ; OLine=449  Select toggled. Get player 1 Y coordinate
F20D: C9 FF                     CMP      #255             
F20F: F0 05                     BEQ      FLOW_A_21_OUTPUT_TRUE 
F211: A9 FF                     LDA      #255             ; OLine=453  Offscreen if it is currently on
F213: 4C 18 F2                  JMP      FLOW_A_21_OUTPUT_END 
FLOW_A_21_OUTPUT_TRUE:                           
F216: A9 0C                     LDA      #12              ; OLine=451  Onscreen if it is currently off
FLOW_A_21_OUTPUT_END:                           
F218: 85 84                     STA      PLAYR1Y          ; OLine=455  Toggled Y coordinate
F21A: 4C 20 F2                  JMP      FLOW_A_19_OUTPUT_END 
FLOW_A_19_OUTPUT_TRUE:                           
F21D: 20 54 F1                  JSR      INIT_PLAYMODE    ; OLine=447  Reset toggled ... start game
FLOW_A_19_OUTPUT_END:                           
                                           
F220: 20 2D F3                  JSR      EXPERTISE        ; OLine=458  Adjust both players for pro settings
F223: 60                        RTS                       ;  --SubroutineContextEnds--
                                           ; </EditorTab>
                                           
                                           ;  ======================================
                                           ; <EditorTab name="go-mode">
INIT_GOMODE:                               ;  --SubroutineContextBegins--
                                           
                                           ;  This function initializes the GAME-OVER game mode.
                                           ;    
F224: 85 2B                     STA      HMCLR            ; OLine=468  Stop both players from moving
F226: A5 02                     LDA      CXP0FB           ; OLine=469  P0 collision with wall
F228: 29 80                     AND      #128             
                                           
F22A: C9 00                     CMP      #0               
F22C: D0 04                     BNE      FLOW_A_22_OUTPUT_FALSE 
F22E: A9 02                     LDA      #2               ; OLine=473  No ... move player 0 ...
F230: 85 83                     STA      PLAYR0Y          ; OLine=474  ... up the screen
FLOW_A_22_OUTPUT_FALSE:                           
                                           
F232: A5 03                     LDA      CXP1FB           ; OLine=477  P1 collision with wall
F234: 29 80                     AND      #128             
                                           
F236: C9 00                     CMP      #0               
F238: D0 0A                     BNE      FLOW_A_24_OUTPUT_FALSE 
F23A: A5 84                     LDA      PLAYR1Y          ; OLine=481
F23C: C9 FF                     CMP      #255             
F23E: F0 04                     BEQ      FLOW_A_24_OUTPUT_FALSE 
F240: A9 02                     LDA      #2               ; OLine=483  Player 1 is onscreen and didn't collide ...
F242: 85 84                     STA      PLAYR1Y          ; OLine=484  ... move up the screen
FLOW_A_24_OUTPUT_FALSE:                           
                                           
F244: A9 00                     LDA      #0               ; OLine=488  Going to ...
F246: 85 88                     STA      MODE             ; OLine=489  ... game-over mode
F248: 85 19                     STA      AUDV0            ; OLine=490  Turn off any ...
F24A: 85 1A                     STA      AUDV1            ; OLine=491  ... sound
F24C: 20 8F F4                  JSR      INIT_GO_FX       ; OLine=492  Initialize sound effects
F24F: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
GOMODE:                                    ;  --SubroutineContextBegins--
                                           
                                           ;  This function is called every frame to process the game
                                           ;  over sequence. When the sound effect has finished, the
                                           ;  game switches to select mode.
                                           
F250: 20 A6 F4                  JSR      PROCESS_GO_FX    ; OLine=502  Process the sound effects
F253: C9 00                     CMP      #0               
F255: F0 03                     BEQ      FLOW_A_25_OUTPUT_FALSE 
F257: 20 EA F1                  JSR      INIT_SELMODE     ; OLine=504  When effect is over, go to select mode
FLOW_A_25_OUTPUT_FALSE:                           
F25A: 60                        RTS                       ;  --SubroutineContextEnds--
                                           ; </EditorTab>
                                           
                                           ;  ======================================
                                           ; <EditorMode name="utils">
MOVE_WALLS:                                ;  --SubroutineContextBegins--
                                           
                                           ;  This function moves the wall down the screen and back to position 0
                                           ;  when it reaches (or passes) 112.
                                           
                                           
F25B: C6 8B                     DEC      WALLDELY         ; OLine=517  Time to move the wall
F25D: A5 8B                     LDA      WALLDELY         ; OLine=518
                                           
F25F: C9 00                     CMP      #0               
F261: D0 19                     BNE      FLOW_A_26_OUTPUT_TRUE 
F263: A5 8C                     LDA      WALLDELYR        ; OLine=523  Reset the ...
F265: 85 8B                     STA      WALLDELY         ; OLine=524  ... delay count
F267: A5 94                     LDA      WALLSTART        ; OLine=525  Current wall position
F269: 18                        CLC                       ; OLine=526  Increment wall position      
F26A: 65 89                     ADC      WALL_INC         
F26C: C9 70                     CMP      #112             
F26E: 90 07                     BCC      FLOW_A_27_OUTPUT_TRUE 
F270: A9 00                     LDA      #0               ; OLine=531  Else restart ...
F272: 85 94                     STA      WALLSTART        ; OLine=532  ... wall at top of screen
F274: A9 01                     LDA      #1               ; OLine=533  Return flag that wall DID restart
F276: 60                        RTS                       
FLOW_A_27_OUTPUT_TRUE:                           
F277: 85 94                     STA      WALLSTART        ; OLine=528  Store new wall position
F279: A9 00                     LDA      #0               ; OLine=529  Return flag that wall did NOT restart
F27B: 60                        RTS                       
FLOW_A_26_OUTPUT_TRUE:                           
F27C: A9 00                     LDA      #0               ; OLine=521  Return flag that wall did NOT restart
                                           
F27E: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
NEW_GAPS:                                  ;  --SubroutineContextBegins--
                                           
                                           ;  This function builds the PF0, PF1, and PF2 graphics for a wall
                                           ;  with the gap pattern (GAPBITS) placed at random in the 20 bit
                                           ;  area.
                                           
F27F: A9 FF                     LDA      #255             ; OLine=546  Start with ...
F281: 85 91                     STA      WALLDRELA        ; OLine=547  ... solid wall in PF0 ...
F283: 85 92                     STA      WALLDRELB        ; OLine=548  ... and PF1
F285: A5 96                     LDA      GAPBITS          ; OLine=549  Store the gap pattern ...
F287: 85 93                     STA      WALLDRELC        ; OLine=550  ... in PF2
                                           
F289: A5 8D                     LDA      ENTROPYA         ; OLine=552  Get ...
F28B: 65 8E                     ADC      ENTROPYB         ; OLine=553  ... a randomish ...
F28D: 65 8F                     ADC      ENTROPYC         ; OLine=554  ... number ...  
F28F: 85 8F                     STA      ENTROPYC         ; OLine=555
F291: 29 0F                     AND      #15              ; OLine=556  ... 0 to 15
                                           
F293: C9 0C                     CMP      #12              
F295: F0 04                     BEQ      FLOW_A_28_OUTPUT_FALSE 
F297: 90 02                     BCC      FLOW_A_28_OUTPUT_FALSE 
                                           ; A = A - 9
F299: E9 09                     SBC      #9               ; OLine=560
FLOW_A_28_OUTPUT_FALSE:                           
                                           
F29B: C9 00                     CMP      #0               
F29D: F0 0D                     BEQ      FLOW_A_29_OUTPUT_FALSE 
F29F: 38                        SEC                       ; OLine=564  Roll gap ...
F2A0: 66 93                     ROR      WALLDRELC        ; OLine=565  ... left ...
F2A2: 26 92                     ROL      WALLDRELB        ; OLine=566  ... desired ...
F2A4: 66 91                     ROR      WALLDRELA        ; OLine=567  ... times ...
F2A6: 38                        SEC                       ; OLine=568
F2A7: E9 01                     SBC      #1               
F2A9: 4C 9B F2                  JMP      FLOW_A_28_OUTPUT_FALSE 
FLOW_A_29_OUTPUT_FALSE:                           
                                           
F2AC: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
MAKE_SCORE:                                ;  --SubroutineContextBegins--
                                           
                                           ;  This function builds the PF1 and PF2 graphics rows for
                                           ;  the byte value passed in A. The current implementation is
                                           ;  two-digits only ... PF2 is blank.
                                           
F2AD: A2 00                     LDX      #0               ; OLine=580  100's digit
F2AF: A0 00                     LDY      #0               ; OLine=581  10's digit
                                           
FLOW_A_30_OUTPUT_BEGIN:                           
F2B1: C9 64                     CMP      #100             
F2B3: 90 07                     BCC      FLOW_A_30_OUTPUT_FALSE 
F2B5: E8                        INX                       ; OLine=584  Count ...
F2B6: 38                        SEC                       ; OLine=585  ... value
F2B7: E9 64                     SBC      #100             
F2B9: 4C B1 F2                  JMP      FLOW_A_30_OUTPUT_BEGIN 
FLOW_A_30_OUTPUT_FALSE:                           
                                           
F2BC: C9 0A                     CMP      #10              
F2BE: 90 07                     BCC      FLOW_A_31_OUTPUT_FALSE 
F2C0: C8                        INY                       ; OLine=589  Count ...
F2C1: 38                        SEC                       ; OLine=590  ... value
F2C2: E9 0A                     SBC      #10              
F2C4: 4C BC F2                  JMP      FLOW_A_30_OUTPUT_FALSE 
FLOW_A_31_OUTPUT_FALSE:                           
                                           
F2C7: 0A                        ASL      A                ; OLine=593  One's digit ...
F2C8: 0A                        ASL      A                ; OLine=594  ... *8 ....
F2C9: 0A                        ASL      A                ; OLine=595  ... to find picture
F2CA: AA                        TAX                       ; OLine=596  One's digit picture to X
F2CB: 98                        TYA                       ; OLine=597  Now the 10's digit
F2CC: 0A                        ASL      A                ; OLine=598  Multiply ...
F2CD: 0A                        ASL      A                ; OLine=599  ... by 8 ...
F2CE: 0A                        ASL      A                ; OLine=600  ... to find picture
F2CF: A8                        TAY                       ; OLine=601  10's picture in Y
                                           
F2D0: B9 62 F5                  LDA      DIGITS,Y         ; OLine=603  Get the 10's digit
F2D3: 29 F0                     AND      #240             
F2D5: 85 97                     STA      SCORE_PF1        ; OLine=605  Store left side
F2D7: BD 62 F5                  LDA      DIGITS,X         ; OLine=606  Get the 1's digit
F2DA: 29 0F                     AND      #15              
F2DC: 05 97                     ORA      SCORE_PF1        ; OLine=608  Put left and right half together
F2DE: 85 97                     STA      SCORE_PF1        ; OLine=609  And store image
                                           
F2E0: B9 63 F5                  LDA      DIGITS+1,Y       ; OLine=611  Repeat for 2nd line of picture
F2E3: 29 F0                     AND      #240             
F2E5: 85 98                     STA      SCORE_PF1+1      ; OLine=613
F2E7: BD 63 F5                  LDA      DIGITS+1,X       ; OLine=614
F2EA: 29 0F                     AND      #15              
F2EC: 05 98                     ORA      SCORE_PF1+1      ; OLine=616
F2EE: 85 98                     STA      SCORE_PF1+1      ; OLine=617
                                           
F2F0: B9 64 F5                  LDA      DIGITS+2,Y       ; OLine=619  Repeat for 3nd line of picture
F2F3: 29 F0                     AND      #240             
F2F5: 85 99                     STA      SCORE_PF1+2      ; OLine=621
F2F7: BD 64 F5                  LDA      DIGITS+2,X       ; OLine=622
F2FA: 29 0F                     AND      #15              
F2FC: 05 99                     ORA      SCORE_PF1+2      ; OLine=624
F2FE: 85 99                     STA      SCORE_PF1+2      ; OLine=625
                                           
F300: B9 65 F5                  LDA      DIGITS+3,Y       ; OLine=627  Repeat for 4th line of picture
F303: 29 F0                     AND      #240             
F305: 85 9A                     STA      SCORE_PF1+3      ; OLine=629
F307: BD 65 F5                  LDA      DIGITS+3,X       ; OLine=630
F30A: 29 0F                     AND      #15              
F30C: 05 9A                     ORA      SCORE_PF1+3      ; OLine=632
F30E: 85 9A                     STA      SCORE_PF1+3      ; OLine=633
                                           
F310: B9 66 F5                  LDA      DIGITS+4,Y       ; OLine=635  Repeat for 5th line of picture
F313: 29 F0                     AND      #240             
F315: 85 9B                     STA      SCORE_PF1+4      ; OLine=637
F317: BD 66 F5                  LDA      DIGITS+4,X       ; OLine=638
F31A: 29 0F                     AND      #15              
F31C: 05 9B                     ORA      SCORE_PF1+4      ; OLine=640
F31E: 85 9B                     STA      SCORE_PF1+4      ; OLine=641
                                           
F320: A9 00                     LDA      #0               ; OLine=643  For now ...
F322: 85 9D                     STA      SCORE_PF2        ; OLine=644  ... there ...
F324: 85 9E                     STA      SCORE_PF2+1      ; OLine=645  ... is ...
F326: 85 9F                     STA      SCORE_PF2+2      ; OLine=646  ... no ...
F328: 85 A0                     STA      SCORE_PF2+3      ; OLine=647  ... 100s ...
F32A: 85 A1                     STA      SCORE_PF2+4      ; OLine=648  ... digit drawn
                                           
F32C: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
EXPERTISE:                                 ;  --SubroutineContextBegins--
                                           
                                           ;  This function changes the Y position of the players based on the
                                           ;  position of their respective pro/novice switches. The player 1
                                           ;  position is NOT changed if the mode is a single-player game.
                                           
F32D: AD 82 02                  LDA      SWCHB            ; OLine=659  Pro/novice settings
F330: 29 80                     AND      #128             
F332: C9 00                     CMP      #0               
F334: F0 05                     BEQ      FLOW_A_32_OUTPUT_TRUE 
F336: A9 08                     LDA      #8               ; OLine=664  Pro ... near the top
F338: 4C 3D F3                  JMP      FLOW_A_32_OUTPUT_END 
FLOW_A_32_OUTPUT_TRUE:                           
F33B: A9 0C                     LDA      #12              ; OLine=662  Novice ... near the bottom
FLOW_A_32_OUTPUT_END:                           
F33D: 85 83                     STA      PLAYR0Y          ; OLine=666  ... to Player 0
                                           
F33F: A6 84                     LDX      PLAYR1Y          ; OLine=668
F341: E0 FF                     CPX      #255             
F343: F0 12                     BEQ      FLOW_A_33_OUTPUT_FALSE 
F345: AD 82 02                  LDA      SWCHB            ; OLine=670
F348: 29 40                     AND      #64              
F34A: C9 00                     CMP      #0               
F34C: F0 05                     BEQ      FLOW_A_34_OUTPUT_TRUE 
F34E: A2 08                     LDX      #8               ; OLine=675  Pro ... near the top
F350: 4C 55 F3                  JMP      FLOW_A_34_OUTPUT_END 
FLOW_A_34_OUTPUT_TRUE:                           
F353: A2 0C                     LDX      #12              ; OLine=673  Novice ... near the bottom
FLOW_A_34_OUTPUT_END:                           
F355: 86 84                     STX      PLAYR1Y          ; OLine=677
FLOW_A_33_OUTPUT_FALSE:                           
                                           
F357: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
ADJUST_DIF:                                ;  --SubroutineContextBegins--
                                           
                                           ;  This function adjusts the wall game difficulty values based on the
                                           ;  current score. The music can also change with the difficulty. A single
                                           ;  table describes the new values and when they take effect.
                                           ;               
F358: A2 00                     LDX      #0               ; OLine=689  Starting at index 0
                                           
FLOW_A_35_OUTPUT_BEGIN:                           
                                           
F35A: BD 17 F5                  LDA      SKILL_VALUES,X   ; OLine=693  Get the score match
F35D: C9 FF                     CMP      #255             
F35F: D0 01                     BNE      FLOW_A_36_OUTPUT_FALSE 
F361: 60                        RTS                       ; OLine=695  End of the table ... leave it alone
FLOW_A_36_OUTPUT_FALSE:                           
F362: C5 8A                     CMP      WALLCNT          
F364: D0 27                     BNE      FLOW_A_37_OUTPUT_FALSE 
F366: E8                        INX                       ; OLine=698  Copy ...
F367: BD 17 F5                  LDA      SKILL_VALUES,X   ; OLine=699  ... new ...
F36A: 85 89                     STA      WALL_INC         ; OLine=700  ... wall increment
F36C: E8                        INX                       ; OLine=701  Copy ...
F36D: BD 17 F5                  LDA      SKILL_VALUES,X   ; OLine=702  ... new ...
F370: 85 8B                     STA      WALLDELY         ; OLine=703  ... wall ...
F372: 85 8C                     STA      WALLDELYR        ; OLine=704  ... delay
F374: E8                        INX                       ; OLine=705  Copy ...
F375: BD 17 F5                  LDA      SKILL_VALUES,X   ; OLine=706  ... new ...
F378: 85 96                     STA      GAPBITS          ; OLine=707  ... gap pattern
F37A: E8                        INX                       ; OLine=708  Copy ...
F37B: BD 17 F5                  LDA      SKILL_VALUES,X   ; OLine=709  ... new ...
F37E: 85 A4                     STA      MUSAIND          ; OLine=710  ... MusicA index
F380: E8                        INX                       ; OLine=711  Copy ...
F381: BD 17 F5                  LDA      SKILL_VALUES,X   ; OLine=712  ... new ...
F384: 85 A7                     STA      MUSBIND          ; OLine=713  ... MusicB index
F386: A9 01                     LDA      #1               ; OLine=714  Force ...
F388: 85 A3                     STA      MUSADEL          ; OLine=715  ... music to ...
F38A: 85 A6                     STA      MUSBDEL          ; OLine=716  ... start new
F38C: 60                        RTS                       ; OLine=717
FLOW_A_37_OUTPUT_FALSE:                           
                                           
F38D: E8                        INX                       ; OLine=720  Move ...
F38E: E8                        INX                       ; OLine=721  ... X ...
F38F: E8                        INX                       ; OLine=722  ... to ...
F390: E8                        INX                       ; OLine=723  ... next ...
F391: E8                        INX                       ; OLine=724  ... row of ...
F392: E8                        INX                       ; OLine=725  ... table
F393: 4C 5A F3                  JMP      FLOW_A_35_OUTPUT_BEGIN 
                                           
                                           ;  ======================================
SEL_RESET_CHK:                             ;  --SubroutineContextBegins--
                                           
                                           ;  This function checks for changes to the reset/select
                                           ;  switches and debounces the transitions.
                                           
                                           
F396: A6 90                     LDX      DEBOUNCE         ; OLine=736  Hold onto old value
F398: AD 82 02                  LDA      SWCHB            ; OLine=737  New value
F39B: 29 03                     AND      #3               ; OLine=738  Only need bottom 2 bits
                                           
F39D: C5 90                     CMP      DEBOUNCE         
F39F: F0 07                     BEQ      FLOW_A_38_OUTPUT_TRUE 
F3A1: 85 90                     STA      DEBOUNCE         ; OLine=743  Hold new value
F3A3: 49 FF                     EOR      #255             
F3A5: 29 03                     AND      #3               ; OLine=745  Only need select/reset
F3A7: 60                        RTS                       
FLOW_A_38_OUTPUT_TRUE:                           
F3A8: A9 00                     LDA      #0               ; OLine=741  Return 0 ... nothing changed
                                           
F3AA: 60                        RTS                       ;  --SubroutineContextEnds--
                                           ; </EditorTab>
                                           
                                           ;  ======================================
                                           ; <EditorTab name="sound">
INIT_MUSIC:                                ;  --SubroutineContextBegins--
                                           
                                           ;  This function initializes the hardware and temporaries
                                           ;  for 2-channel music
                                           
F3AB: A9 06                     LDA      #6               
F3AD: 85 15                     STA      AUDC0            ; OLine=759  ... to pure ...
F3AF: 85 16                     STA      AUDC1            ; OLine=760  ... tones
F3B1: A9 00                     LDA      #0               ; OLine=761  Turn off ...
F3B3: 85 19                     STA      AUDV0            ; OLine=762  ... all ...
F3B5: 85 1A                     STA      AUDV1            ; OLine=763  ... sound
F3B7: 85 A4                     STA      MUSAIND          ; OLine=764  Music pointers ...
F3B9: 85 A7                     STA      MUSBIND          ; OLine=765  ... to top of data
F3BB: A9 01                     LDA      #1               ; OLine=766  Force ...
F3BD: 85 A3                     STA      MUSADEL          ; OLine=767  ... music ...
F3BF: 85 A6                     STA      MUSBDEL          ; OLine=768  ... reload
F3C1: A9 0F                     LDA      #15              ; OLine=769  Set volume levels ...
F3C3: 85 A5                     STA      MUSAVOL          ; OLine=770  ... to ...
F3C5: 85 A8                     STA      MUSBVOL          ; OLine=771  ... maximum
F3C7: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
PROCESS_MUSIC:                             ;  --SubroutineContextBegins--
                                           
                                           ;  This function is called once per frame to process the
                                           ;  2 channel music. Two tables contain the commands/notes
                                           ;  for individual channels. This function changes the
                                           ;  notes at the right time.
                                           ;            
F3C8: C6 A3                     DEC      MUSADEL          ; OLine=782  Last note ended?
F3CA: D0 5F                     BNE      FLOW_A_39_OUTPUT_FALSE 
                                           
FLOW_A_40_OUTPUT_BEGIN:                           
F3CC: A6 A4                     LDX      MUSAIND          ; OLine=786  Voice-A index
F3CE: BD BE F4                  LDA      MUSICA,X         ; OLine=787  Get the next music command
F3D1: C9 00                     CMP      #0               
F3D3: F0 26                     BEQ      FLOW_A_41_OUTPUT_TRUE 
F3D5: C9 01                     CMP      #1               
F3D7: F0 13                     BEQ      FLOW_A_42_OUTPUT_TRUE 
F3D9: C9 02                     CMP      #2               
F3DB: D0 2B                     BNE      FLOW_A_41_OUTPUT_END 
F3DD: E8                        INX                       ; OLine=805  Point to volume value
F3DE: E6 A4                     INC      MUSAIND          ; OLine=806  Bump the music pointer
F3E0: BD BE F4                  LDA      MUSICA,X         ; OLine=807  Get the volume value
F3E3: E6 A4                     INC      MUSAIND          ; OLine=808  Bump the music pointer
F3E5: 85 A5                     STA      MUSAVOL          ; OLine=809  Store the new volume value
F3E7: A9 00                     LDA      #0               ; OLine=810  Continue processing
F3E9: 4C 08 F4                  JMP      FLOW_A_41_OUTPUT_END 
FLOW_A_42_OUTPUT_TRUE:                           
F3EC: E8                        INX                       ; OLine=798  Point to the control value
F3ED: E6 A4                     INC      MUSAIND          ; OLine=799  Bump the music pointer
F3EF: BD BE F4                  LDA      MUSICA,X         ; OLine=800  Get the control value
F3F2: E6 A4                     INC      MUSAIND          ; OLine=801  Bump the music pointer
F3F4: 85 15                     STA      AUDC0            ; OLine=802  Store the new control value
F3F6: A9 00                     LDA      #0               ; OLine=803  Continue processing
F3F8: 4C 08 F4                  JMP      FLOW_A_41_OUTPUT_END 
FLOW_A_41_OUTPUT_TRUE:                           
F3FB: E8                        INX                       ; OLine=789  Point to jump value
F3FC: 8A                        TXA                       ; OLine=790  X to ...
F3FD: A8                        TAY                       ; OLine=791  ... Y (pointer to jump value)
F3FE: E8                        INX                       ; OLine=792  Point one past jump value
F3FF: 8A                        TXA                       ; OLine=793  Into A so we can subtract
F400: 38                        SEC                       ; OLine=794  New index
F401: F9 BE F4                  SBC      MUSICA,Y         
F404: 85 A4                     STA      MUSAIND          ; OLine=795  Store it
F406: A9 00                     LDA      #0               ; OLine=796  Continue processing
FLOW_A_41_OUTPUT_END:                           
F408: C9 00                     CMP      #0               
F40A: F0 C0                     BEQ      FLOW_A_40_OUTPUT_BEGIN 
                                           
F40C: A4 A5                     LDY      MUSAVOL          ; OLine=814  Get the volume
F40E: 29 1F                     AND      #31              ; OLine=815  Lower 5 bits are frequency
F410: C9 1F                     CMP      #31              
F412: D0 02                     BNE      FLOW_A_44_OUTPUT_FALSE 
F414: A0 00                     LDY      #0               ; OLine=817  Frequency of 31 flags silence
FLOW_A_44_OUTPUT_FALSE:                           
F416: 85 17                     STA      AUDF0            ; OLine=819  Store the frequency
F418: 84 19                     STY      AUDV0            ; OLine=820  Store the volume
F41A: BD BE F4                  LDA      MUSICA,X         ; OLine=821  Get the note value again
F41D: E6 A4                     INC      MUSAIND          ; OLine=822  Bump to the next command
F41F: 6A                        ROR      A                ; OLine=823  The upper ...
F420: 6A                        ROR      A                ; OLine=824  ... three ...
F421: 6A                        ROR      A                ; OLine=825  ... bits ...
F422: 6A                        ROR      A                ; OLine=826  ... hold ...
F423: 6A                        ROR      A                ; OLine=827  ... the ...
F424: 29 07                     AND      #7               ; OLine=828  ... delay
F426: 18                        CLC                       ; OLine=829  No accidental carry
F427: 2A                        ROL      A                ; OLine=830  Every delay tick ...
F428: 2A                        ROL      A                ; OLine=831  ... is *4 frames
F429: 85 A3                     STA      MUSADEL          ; OLine=832  Store the note delay
FLOW_A_39_OUTPUT_FALSE:                           
                                           
F42B: C6 A6                     DEC      MUSBDEL          ; OLine=835  Repeat Channel A sequence for Channel B
F42D: D0 5F                     BNE      FLOW_A_45_OUTPUT_FALSE 
                                           
FLOW_A_46_OUTPUT_BEGIN:                           
F42F: A6 A7                     LDX      MUSBIND          ; OLine=839
F431: BD EB F4                  LDA      MUSICB,X         ; OLine=840
F434: C9 00                     CMP      #0               
F436: F0 26                     BEQ      FLOW_A_47_OUTPUT_TRUE 
F438: C9 01                     CMP      #1               
F43A: F0 13                     BEQ      FLOW_A_48_OUTPUT_TRUE 
F43C: C9 02                     CMP      #2               
F43E: D0 2B                     BNE      FLOW_A_47_OUTPUT_END 
F440: E8                        INX                       ; OLine=858
F441: E6 A7                     INC      MUSBIND          ; OLine=859
F443: BD EB F4                  LDA      MUSICB,X         ; OLine=860
F446: E6 A7                     INC      MUSBIND          ; OLine=861
F448: 85 A8                     STA      MUSBVOL          ; OLine=862
F44A: A9 00                     LDA      #0               ; OLine=863
F44C: 4C 6B F4                  JMP      FLOW_A_47_OUTPUT_END 
FLOW_A_48_OUTPUT_TRUE:                           
F44F: E8                        INX                       ; OLine=851
F450: E6 A7                     INC      MUSBIND          ; OLine=852
F452: BD EB F4                  LDA      MUSICB,X         ; OLine=853
F455: E6 A7                     INC      MUSBIND          ; OLine=854
F457: 85 16                     STA      AUDC1            ; OLine=855
F459: A9 00                     LDA      #0               ; OLine=856
F45B: 4C 6B F4                  JMP      FLOW_A_47_OUTPUT_END 
FLOW_A_47_OUTPUT_TRUE:                           
F45E: E8                        INX                       ; OLine=842
F45F: 8A                        TXA                       ; OLine=843
F460: A8                        TAY                       ; OLine=844
F461: E8                        INX                       ; OLine=845
F462: 8A                        TXA                       ; OLine=846
F463: 38                        SEC                       ; OLine=847
F464: F9 EB F4                  SBC      MUSICB,Y         
F467: 85 A7                     STA      MUSBIND          ; OLine=848
F469: A9 00                     LDA      #0               ; OLine=849
FLOW_A_47_OUTPUT_END:                           
F46B: C9 00                     CMP      #0               
F46D: F0 C0                     BEQ      FLOW_A_46_OUTPUT_BEGIN 
                                           
F46F: A4 A8                     LDY      MUSBVOL          ; OLine=867
F471: 29 1F                     AND      #31              ; OLine=868
F473: C9 1F                     CMP      #31              
F475: D0 02                     BNE      FLOW_A_50_OUTPUT_FALSE 
F477: A0 00                     LDY      #0               ; OLine=870
FLOW_A_50_OUTPUT_FALSE:                           
F479: 85 18                     STA      AUDF1            ; OLine=872
F47B: 84 1A                     STY      AUDV1            ; OLine=873
F47D: BD EB F4                  LDA      MUSICB,X         ; OLine=874
F480: E6 A7                     INC      MUSBIND          ; OLine=875
F482: 6A                        ROR      A                ; OLine=876
F483: 6A                        ROR      A                ; OLine=877
F484: 6A                        ROR      A                ; OLine=878
F485: 6A                        ROR      A                ; OLine=879
F486: 6A                        ROR      A                ; OLine=880
F487: 29 07                     AND      #7               ; OLine=881
F489: 18                        CLC                       ; OLine=882
F48A: 2A                        ROL      A                ; OLine=883
F48B: 2A                        ROL      A                ; OLine=884
F48C: 85 A6                     STA      MUSBDEL          ; OLine=885
FLOW_A_45_OUTPUT_FALSE:                           
F48E: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
INIT_GO_FX:                                ;  --SubroutineContextBegins--
                                           
                                           ;  This function initializes the hardware and temporaries
                                           ;  to play the soundeffect of a player hitting the wall
                                           
F48F: A9 05                     LDA      #5               ; OLine=895  Set counter for frame delay ...
F491: 85 86                     STA      MUS_TMP1         ; OLine=896  ... between frequency change
F493: A9 03                     LDA      #3               ; OLine=897  Tone type ...
F495: 85 15                     STA      AUDC0            ; OLine=898  ... poly tone
F497: A9 0F                     LDA      #15              ; OLine=899  Volume A ...
F499: 85 19                     STA      AUDV0            ; OLine=900  ... to max
F49B: A9 00                     LDA      #0               ; OLine=901  Volume B ...
F49D: 85 1A                     STA      AUDV1            ; OLine=902  ... silence
F49F: A9 F0                     LDA      #240             ; OLine=903  Initial ...
F4A1: 85 85                     STA      MUS_TMP0         ; OLine=904  ... sound ...
F4A3: 85 17                     STA      AUDF0            ; OLine=905  ... frequency
F4A5: 60                        RTS                       ;  --SubroutineContextEnds--
                                           
                                           ;  ======================================
PROCESS_GO_FX:                             ;  --SubroutineContextBegins--
                                           
                                           ;  This function is called once per scanline to play the
                                           ;  soundeffects of a player hitting the wall.
                                           ;         
F4A6: C6 86                     DEC      MUS_TMP1         ; OLine=914  Time to change the frequency?
F4A8: D0 11                     BNE      FLOW_A_52_OUTPUT_FALSE 
F4AA: A9 05                     LDA      #5               ; OLine=916  Reload ...
F4AC: 85 86                     STA      MUS_TMP1         ; OLine=917  ... the frame count
F4AE: E6 85                     INC      MUS_TMP0         ; OLine=918  Increment ...
F4B0: A5 85                     LDA      MUS_TMP0         ; OLine=919  ... the frequency divisor
F4B2: 85 17                     STA      AUDF0            ; OLine=920  Change the frequency
F4B4: C9 00                     CMP      #0               
F4B6: D0 03                     BNE      FLOW_A_52_OUTPUT_FALSE 
F4B8: A9 01                     LDA      #1               ; OLine=922  All done ... return 1
F4BA: 60                        RTS                       ; OLine=923
FLOW_A_52_OUTPUT_FALSE:                           
F4BB: A9 00                     LDA      #0               ; OLine=926
                                           
F4BD: 60                        RTS                       ;  --SubroutineContextEnds--
                                           ; </EditorTab>
                                           
                                           ; </EditorTab name="data">
                                           ;  ======================================
                                           ;  Music commands for Channel A and Channel B
                                           
                                           ;  A word on music and wall timing ...
                                           
                                           ;  Wall moves between scanlines 0 and 111 (112 total)
                                           
                                           ;  Wall-increment   frames-to-top
                                           ;       3             336
                                           ;       2             224
                                           ;       1             112
                                           ;      0.5             56  ; Ah ... but we are getting one less
                                           
                                           ;  Each tick is multiplied by 4 to yield 4 frames per tick
                                           ;  32 ticks/song = 32*4 = 128 frames / song
                                           
                                           ;  We want songs to start with wall at top ...
                                           
                                           ;  Find the least-common-multiple
                                           ;  336 and 128 : 2688 8 walls, 21 musics
                                           ;  224 and 128 :  896 4 walls,  7 musics
                                           ;  112 and 128 :  896 8 walls,  7 musics
                                           ;   56 and 128 :  896 16 walls, 7 musics
                                           
                                           ;  Wall moving every other gives us 112*2=224 scanlines
                                           ;  Song and wall are at start every 4
                                           ;  1 scanline, every 8
                                           ;  Wall delay=3 gives us 128*3=336 scanlines 2
                                           
                                           ;  MUSIC EQUATES
                                           
.MUSCMD_JUMP      =     0                ; OLine=963
.MUSCMD_CONTROL   =     1                ; OLine=964
.MUSCMD_VOLUME    =     2                ; OLine=965
.MUS_REST         =     31               ; OLine=966
.MUS_DEL_1        =     32*1             ; OLine=967
.MUS_DEL_2        =     32*2             ; OLine=968
.MUS_DEL_3        =     32*3             ; OLine=969
.MUS_DEL_4        =     32*4             ; OLine=970
                                           
                                           
                                           
MUSICA:                                     ; OLine=974
                                           
MA_SONG_1:                                  ; OLine=976
                                           
F4BE: 01 0C                     .byte    MUSCMD_CONTROL, 12
F4C0: 02 0F                     .byte    MUSCMD_VOLUME,  15 ; OLine=979  Volume (full)
                                           
MA1_01:                                     ; OLine=981
F4C2: 6F                        .byte    MUS_DEL_3  +  15 ; OLine=982
F4C3: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=983
F4C4: 6F                        .byte    MUS_DEL_3  +  15 ; OLine=984
F4C5: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=985
F4C6: 27                        .byte    MUS_DEL_1  +  7  ; OLine=986
F4C7: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=987
F4C8: 27                        .byte    MUS_DEL_1  +  7  ; OLine=988
F4C9: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=989
F4CA: 5F                        .byte    MUS_DEL_2  +  MUS_REST ; OLine=990
F4CB: 28                        .byte    MUS_DEL_1  +  8  ; OLine=991
F4CC: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=992
F4CD: 9F                        .byte    MUS_DEL_4  +  MUS_REST ; OLine=993
F4CE: 51                        .byte    MUS_DEL_2  +  17 ; OLine=994
F4CF: 5F                        .byte    MUS_DEL_2  +  MUS_REST ; OLine=995
F4D0: 51                        .byte    MUS_DEL_2  +  17 ; OLine=996
F4D1: 5F                        .byte    MUS_DEL_2  +  MUS_REST ; OLine=997
F4D2: 70                        .byte    MUS_DEL_3  +  16 ; OLine=998
F4D3: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=999
F4D4: 00 14                     .byte    MUSCMD_JUMP, (MA1_END - MA1_01) ; OLine=1000  Repeat back to top
MA1_END:                                    ; OLine=1001
                                           
MA_SONG_2:                                  ; OLine=1003
                                           
F4D6: 01 0C                     .byte    MUSCMD_CONTROL, 12
F4D8: 02 0F                     .byte    MUSCMD_VOLUME,  15 ; OLine=1006
                                           
MA2_01:                                     ; OLine=1008
F4DA: 2F                        .byte    MUS_DEL_1  +  15 ; OLine=1009
F4DB: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1010
F4DC: 2F                        .byte    MUS_DEL_1  +  15 ; OLine=1011
F4DD: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1012
F4DE: 5F                        .byte    MUS_DEL_2  +  MUS_REST ; OLine=1013
F4DF: 87                        .byte    MUS_DEL_4  +  7  ; OLine=1014
F4E0: 9F                        .byte    MUS_DEL_4  +  MUS_REST ; OLine=1015
F4E1: 4F                        .byte    MUS_DEL_2  +  15 ; OLine=1016
F4E2: 9F                        .byte    MUS_DEL_4  +  MUS_REST ; OLine=1017
F4E3: 4C                        .byte    MUS_DEL_2  +  12 ; OLine=1018
F4E4: 5F                        .byte    MUS_DEL_2  +  MUS_REST ; OLine=1019
F4E5: 4F                        .byte    MUS_DEL_2  +  15 ; OLine=1020
F4E6: 5F                        .byte    MUS_DEL_2  +  MUS_REST ; OLine=1021
F4E7: 51                        .byte    MUS_DEL_2  +  17 ; OLine=1022
F4E8: 5F                        .byte    MUS_DEL_2  +  MUS_REST ; OLine=1023
F4E9: 00 11                     .byte    MUSCMD_JUMP, (MA2_END - MA2_01) ; OLine=1024  Repeat back to top
MA2_END:                                    ; OLine=1025
                                           
                                           
                                           
MUSICB:                                    ; OLine=1029
                                           
MB_SONG_1:                                  ; OLine=1031
                                           
F4EB: 01 08                     .byte    MUSCMD_CONTROL, 8
F4ED: 02 08                     .byte    MUSCMD_VOLUME,  8 ; OLine=1034  Volume (half)
                                           
MB1_01:                                     ; OLine=1036
F4EF: 2A                        .byte    MUS_DEL_1  +  10 ; OLine=1037
F4F0: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1038
F4F1: 34                        .byte    MUS_DEL_1  +  20 ; OLine=1039
F4F2: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1040
F4F3: 3E                        .byte    MUS_DEL_1  +  30 ; OLine=1041
F4F4: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1042
F4F5: 2F                        .byte    MUS_DEL_1  +  15 ; OLine=1043
F4F6: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1044
F4F7: 2A                        .byte    MUS_DEL_1  +  10 ; OLine=1045
F4F8: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1046
F4F9: 34                        .byte    MUS_DEL_1  +  20 ; OLine=1047
F4FA: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1048
F4FB: 3E                        .byte    MUS_DEL_1  +  30 ; OLine=1049
F4FC: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1050
F4FD: 2F                        .byte    MUS_DEL_1  +  15 ; OLine=1051
F4FE: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1052
F4FF: 00 12                     .byte    MUSCMD_JUMP, (MB1_END - MB1_01) ; OLine=1053  Repeat back to top
MB1_END:                                    ; OLine=1054
                                           
MB_SONG_2:                                  ; OLine=1056
                                           
F501: 01 08                     .byte    MUSCMD_CONTROL, 8
F503: 02 08                     .byte    MUSCMD_VOLUME,  8 ; OLine=1059
                                           
MB2_01:                                     ; OLine=1061
F505: 21                        .byte    MUS_DEL_1  +  1  ; OLine=1062
F506: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1063
F507: 21                        .byte    MUS_DEL_1  +  1  ; OLine=1064
F508: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1065
F509: 21                        .byte    MUS_DEL_1  +  1  ; OLine=1066
F50A: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1067
F50B: 21                        .byte    MUS_DEL_1  +  1  ; OLine=1068
F50C: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1069
F50D: 3E                        .byte    MUS_DEL_1  +  30 ; OLine=1070
F50E: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1071
F50F: 3E                        .byte    MUS_DEL_1  +  30 ; OLine=1072
F510: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1073
F511: 3E                        .byte    MUS_DEL_1  +  30 ; OLine=1074
F512: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1075
F513: 3E                        .byte    MUS_DEL_1  +  30 ; OLine=1076
F514: 3F                        .byte    MUS_DEL_1  +  MUS_REST ; OLine=1077
F515: 00 12                     .byte    MUSCMD_JUMP, (MB2_END - MB2_01) ; OLine=1078  Repeat back to top
MB2_END:                                    ; OLine=1079
                                           
                                           
                                           ;  ======================================
SKILL_VALUES:                               ; OLine=1083
                                           
                                           ;  This table describes how to change the various
                                           ;  difficulty parameters as the game progresses.
                                           ;  For instance, the second entry in the table 
                                           ;  says that when the score is 4, change the values of
                                           ;  wall-increment to 1, frame-delay to 2, gap-pattern to 0,
                                           ;  MusicA to 24, and MusicB to 22.
                                           
                                           ;  A 255 on the end of the table indicates the end 
                                           
                                           ;  Wall  Inc  Delay     Gap   MA                 MB
F517: 00 01 03 00 00 00                  .byte    0,    1,   3,     0  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB ; OLine=1095
F51D: 04 01 02 00 18 16                  .byte    4,    1,   2,     0  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB ; OLine=1096
F523: 08 01 01 00 00 00                  .byte    8,    1,   1,     0  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB ; OLine=1097
F529: 10 01 01 01 18 16                  .byte    16,    1,   1,     1  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB ; OLine=1098
F52F: 18 01 01 03 00 00                  .byte    24,    1,   1,     3  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB ; OLine=1099
F535: 20 01 01 07 18 16                  .byte    32,    1,   1,     7  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB ; OLine=1100
F53B: 28 01 01 0F 00 00                  .byte    40,    1,   1,    15  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB ; OLine=1101
F541: 30 02 01 00 18 16                  .byte    48,    2,   1,     0  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB ; OLine=1102
F547: 40 02 01 01 00 00                  .byte    64,    2,   1,     1  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB ; OLine=1103
F54D: 50 02 01 03 18 16                  .byte    80,    2,   1,     3  ,MA_SONG_2-MUSICA , MB_SONG_2-MUSICB ; OLine=1104
F553: 60 02 01 07 00 00                  .byte    96 ,   2,   1,     7  ,MA_SONG_1-MUSICA , MB_SONG_1-MUSICB ; OLine=1105
F559: FF                        .byte    255              ; OLine=1106
                                           
                                           ;  ======================================
                                           ;  Image for players
GR_PLAYER:                                 ; OLine=1110
                                           ; <Graphic widthBits="8" heightBits="8" bitDepth="1" name="player">     
F55A: 10                        .byte    16
F55B: 10                        .byte    16
F55C: 28                        .byte    40
F55D: 28                        .byte    40
F55E: 54                        .byte    84
F55F: 54                        .byte    84
F560: AA                        .byte    170
F561: 7C                        .byte    124
                                           ; </Graphic>
                                           
                                           ;  ======================================
                                           ;  Images for numbers
DIGITS:                                    ; OLine=1124
                                           ;  We only need 5 rows, but the extra space on the end makes each digit 8 rows,
                                           ;  which makes it the multiplication easier.
                                           ; <Graphic widthBits="8" heightBits="8" bitDepth="1" images="10" name="digits">
F562: 0E 0A 0A 0A 0E 00 00 00                  .byte    14 ,10 ,10 ,10 ,14, 0,0,0
F56A: 22 22 22 22 22 00 00 00                  .byte    34 ,34 ,34 ,34 ,34, 0,0,0
F572: EE 22 EE 88 EE 00 00 00                  .byte    238 ,34 ,238 ,136 ,238, 0,0,0
F57A: EE 22 66 22 EE 00 00 00                  .byte    238 ,34 ,102 ,34 ,238, 0,0,0
F582: AA AA EE 22 22 00 00 00                  .byte    170 ,170 ,238 ,34 ,34, 0,0,0
F58A: EE 88 EE 22 EE 00 00 00                  .byte    238 ,136 ,238 ,34 ,238, 0,0,0
F592: EE 88 EE AA EE 00 00 00                  .byte    238 ,136 ,238 ,170 ,238, 0,0,0
F59A: EE 22 22 22 22 00 00 00                  .byte    238 ,34 ,34 ,34 ,34, 0,0,0
F5A2: EE AA EE AA EE 00 00 00                  .byte    238 ,170 ,238 ,170 ,238, 0,0,0
F5AA: EE AA EE 22 EE 00 00 00                  .byte    238 ,170 ,238 ,34 ,238, 0,0,0
                                           ; </Graphic>
                                           
                                           ; </EditorTab>
                                           
                                           ; <EditorTab name="vectors">
                                           ;  ====================================== 
                                           ;  6502 Hardware vectors at the end of memory
F7FA:
F7FA: 00 00                     .word    0
F7FC: 00 F0                     .word    main             ; OLine=1147  Reset vector (top of program)
F7FE: 00 00                     .word    0
                                           
                                           ; </EditorTab>
                                           

